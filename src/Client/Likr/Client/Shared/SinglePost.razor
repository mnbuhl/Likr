@if (PostDto != null)
{
    <div class="post-container border border-opacity-25 rounded-md mb-4 relative">
        @if (UserId != null && string.Equals(UserId, PostDto.User.Id.ToString()))
        {
            <button @onclick="@(async () => await OnDelete.InvokeAsync(PostDto))" 
                    class="w-5 absolute right-0 mt-4 mr-4 opacity-75">
                <img src="images/delete.svg" />
            </button>
        }
        <div class="p-5">
            <a href="posts/@PostDto.Id">
                <a href="" class="space-x-1">
                    <p class="inline-block hover:underline mb-5 font-semibold">@PostDto.User.DisplayName</p>
                    <p class="inline-block text-gray-500 text-sm hover:underline">@@@PostDto.User.Username</p>
                </a>
                <p class="mb-5">@PostDto.Body</p>
            </a>
            <div class="space-x-10">
                <button>
                    <img class="w-5 inline-block" src="images/comment.svg" alt="comment" />
                    <span class="inline-block">@PostDto.CommentsCount</span>
                </button>

                <button>
                    <img class="w-5 inline-block" src="images/star.svg" alt="comment" />
                    <span class="inline-block">@PostDto.LikesCount</span>
                </button>

                <button>
                    <img class="w-5 inline-block" src="images/share.svg" alt="share" />
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Inject]
    public AuthService? AuthService { get; set; }
    
    [Parameter]
    public EventCallback<PostDto> OnDelete { get; set; }

    [Parameter]
    public PostDto? PostDto { get; set; }

    [Parameter]
    public string? UserId { get; set; }
}