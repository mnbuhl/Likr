<div class="mt-4">
    <EditForm Model="@_comment" OnValidSubmit="OnValidSubmit">
        <InputTextArea
            class="border lg:w-9/12 w-full p-4 text-white bg-gray-900 mr-5 rounded-xl border-gray-600"
            @bind-Value="@_comment.Body" placeholder="Add your comment here..." rows="@_rows"
            @onclick="@(() => _rows = "2")" @onfocusout="@(() => _rows = "1")">
        </InputTextArea>
        <button
            class="bg-blue-500 hover:bg-blue-700 2xl:w-24 lg:w-14 sm:w-24 text-white font-bold py-2 md:px-3 px-4 rounded-full align-top mt-2"
            type="submit">
            Post
        </button>
    </EditForm>
</div>

@code {
    [Inject]
    public ICommentService? CommentService { get; set; }
    
    [Inject]
    public AuthService? AuthService { get; set; }
    
    [Parameter]
    public EventCallback<CommentDto> OnNestedCommentCreated { get; set; }
    
    [Parameter]
    public string? PostId { get; set; }
    
    private CreateCommentDto _comment = new CreateCommentDto();
    private string _rows = "1";

    public async Task OnValidSubmit()
    {
        if (CommentService == null || AuthService == null || PostId == null)
            return;

        var user = await AuthService.GetCurrentUser();
        
        if (user == null)
            return;
        
        _comment.PostId = Guid.Parse(PostId);
        _comment.UserId = Guid.Parse(user.GetUserId());
        
        var comment = await CommentService.CreateComment(_comment);

        _comment = new CreateCommentDto();
        
        await OnNestedCommentCreated.InvokeAsync(comment);
    }
}